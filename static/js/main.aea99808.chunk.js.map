{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["FormElement","styled","form","Input","input","Button","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","List","ul","remove","css","toggle","Item","li","hidden","Content","span","done","Tasks","toggleTaskDone","tasks","hideDone","removeTask","map","task","key","id","onClick","content","visible","Wrapper","div","Buttons","toggleHideDone","setAllDone","length","disabled","every","SectionElement","section","SectionHeader","header","SectionContent","Section","title","body","extraHeaderContent","Header","MainContainer","main","Container","props","children","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aea99808.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const FormElement = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: 787px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: hsl(180, 100%, 25%);\r\n    color: white;\r\n    padding: 10px;\r\n    transition: background-color .3s, transform .3s;\r\n\r\n    &:hover{\r\n        background-color: hsl(180, 100%, 30%);\r\n        cursor: pointer;\r\n        transform: scale(1.2);\r\n    }\r\n\r\n    &:active{\r\n        background-color: hsl(180, 100%, 20%);\r\n    }\r\n`;","import React, { useState } from \"react\";\r\nimport { FormElement, Input, Button } from './styled';\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <FormElement className=\"form\" onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                className=\"form__inputElement\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button className=\"form__buttonElement\">\r\n                Dodaj zadanie\r\n            </Button>\r\n        </FormElement>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: background .3s;\r\n\r\n    ${({remove}) => remove && css`\r\n        background: hsl(0, 100%, 50%);\r\n\r\n        &:hover{\r\n            background: hsl(0, 100%, 40%);\r\n            cursor: pointer;\r\n        }\r\n    `}\r\n\r\n    ${({toggle}) => toggle && css`\r\n        background: hsl(120, 100%, 25%);\r\n\r\n        &:hover{\r\n            background: hsl(120, 100%, 30%);\r\n            cursor: pointer;\r\n        };\r\n    `}\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 20px;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import React from \"react\";\r\nimport { Content, Item, List, Button } from './styled';\r\n\r\nconst Tasks = ({ toggleTaskDone, tasks, hideDone, removeTask }) => (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item\r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n            >\r\n                <Button\r\n                    toggle\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {(task.done) ? \"âœ”\" : \"\"}\r\n                </Button>\r\n                <Content \r\n                    done={task.done}\r\n                >\r\n                    {task.content}\r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    ðŸ—‘\r\n                </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n);\r\n\r\nexport default Tasks;","import styled, { css } from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    border: none;\r\n    color: hsl(180, 100%, 35%);\r\n    font-weight: 300;\r\n    transition: color .3s;\r\n\r\n    &:hover {\r\n        color: hsl(180, 100%, 45%);\r\n        cursor: pointer;\r\n    };\r\n\r\n    &:disabled {\r\n        color: grey;\r\n           cursor: initial;\r\n    }\r\n\r\n    ${({visible}) => visible && css`\r\n        display: block;\r\n    `}\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-gap: 20px;\r\n`;","import React from \"react\";\r\nimport { Button, Wrapper } from './styled'\r\n\r\n\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    tasks.length > 0 && (\r\n        <Wrapper>\r\n            <Button\r\n                onClick={toggleHideDone}\r\n            >\r\n                {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n            </Button>\r\n            <Button\r\n                disabled={tasks.every(({ done }) => done)}\r\n                onClick={setAllDone}\r\n            >\r\n                UkoÅ„cz wszystkie\r\n            </Button>\r\n        </Wrapper>\r\n    )\r\n\r\n);\r\n\r\nexport default Buttons;","import styled from 'styled-components';\r\n\r\nexport const SectionElement = styled.section`\r\n    background: #ffffff;\r\n    box-shadow: #cccccc 0 0 3px .5px;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n    border-bottom: 2px solid #bbb;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-direction: row;\r\n    align-items: center;\r\n`;\r\n\r\nexport const SectionContent = styled.div`\r\n    padding: 20px 0;\r\n`;","import React from \"react\";\r\nimport { SectionElement, SectionHeader, SectionContent } from './styled';\r\n\r\n\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <SectionElement>\r\n        <SectionHeader>\r\n            <h2>{title}</h2>\r\n            {extraHeaderContent}\r\n        </SectionHeader>\r\n        <SectionContent>\r\n            {body}\r\n        </SectionContent>\r\n    </SectionElement>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nexport const MainContainer = styled.main`\r\n    max-width: 1100px;\r\n    margin: 0 auto;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-gap: 20px;\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { MainContainer } from './styled';\r\n\r\nconst Container = (props) => (\r\n    <MainContainer className=\"container\">\r\n        {props.children}\r\n    </MainContainer>\r\n);\r\n\r\nexport default Container;","import React, { useState } from 'react';\r\nimport Form from \"./Form\";\r\nimport Tasks from './Tasks';\r\nimport Buttons from './Buttons';\r\nimport Section from './Section';\r\nimport Header from './Header';\r\nimport Container from './Container';\r\n\r\nfunction App() {\r\n  const [hideDone, setHideDone] = useState(false);\r\n  const [tasks, setTasks] = useState([\r\n    { id: 1, content: \"react\", done: true, },\r\n    { id: 2, content: \"kolacja\", done: false, },\r\n  ]);\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone);\r\n  }\r\n\r\n  const removeTask = (id) => {\r\n    setTasks(tasks => tasks.filter(\r\n      task => task.id !== id\r\n    ));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id) {\r\n        return { ...task, done: !task.done };\r\n      }\r\n\r\n\r\n      return task;\r\n    }))\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks(tasks => tasks.map(\r\n      task => ({ ...task, done: true })\r\n    ));\r\n  };\r\n\r\n  const addNewTask = (newTaskContent) => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content: newTaskContent,\r\n        done: false,\r\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\r\n      },\r\n    ])\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadaÅ„\" />\r\n\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form addNewTask={addNewTask} />}\r\n      />\r\n\r\n      <Section\r\n        title=\"Lista zadaÅ„\"\r\n        body={\r\n          <Tasks\r\n            toggleTaskDone={toggleTaskDone}\r\n            removeTask={removeTask}\r\n            hideDone={hideDone}\r\n            tasks={tasks}\r\n          />}\r\n        extraHeaderContent={\r\n          <Buttons\r\n            toggleHideDone={toggleHideDone}\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            setAllDone={setAllDone}\r\n          />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}