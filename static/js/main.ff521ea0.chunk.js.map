{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","Tasks","tasks","map","task","key","id","done","hideDoneTasks","content","Buttons","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAUeA,G,UAPF,SAACC,GAAD,OACT,0BAAMC,UAAU,QACZ,2BAAOA,UAAU,uBACjB,4BAAQA,UAAU,uBAAlB,oBCiBOC,G,MApBD,SAACF,GAAD,OACV,wBAAIC,UAAU,aACTD,EAAMG,MAAMC,KAAI,SAAAC,GAAI,OACjB,wBACAC,IAAKD,EAAKE,GAAIN,UAAS,wBAAmBI,EAAKG,MAAQR,EAAMS,cAAgB,0BAA4B,KAErG,yBAAKR,UAAU,0BACTI,EAAKG,KAAQ,SAAM,IAEzB,0BAAMP,UAAS,UAAKI,EAAKG,KAAO,uBAAyB,GAA1C,MACdH,EAAKK,SAEN,yBAAKT,UAAU,0BAAf,uBCFDU,G,MAVC,SAAC,GAAD,IAAER,EAAF,EAAEA,MAAOM,EAAT,EAASA,cAAT,OACZN,EAAMS,OAAS,GACX,yBAAKX,UAAU,oBACX,4BAAQA,UAAU,2BAAlB,IAA8CQ,EAAgB,aAAU,QAAxE,mBACA,4BAAQR,UAAU,0BAA0BY,SAAUV,EAAMW,OAAM,qBAAGN,SAArE,4BCQGO,G,MAZC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMC,EAAf,EAAeA,mBAAf,OACZ,6BAASjB,UAAU,WACf,4BAAQA,UAAU,mBACd,4BAAMe,GACLE,GAEL,yBAAKjB,UAAU,oBACVgB,MCFEE,EANA,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAH,OACX,4BAAQf,UAAU,UACd,4BAAKe,KCKEI,G,MANG,SAACpB,GAAD,OACd,0BAAMC,UAAU,aACXD,EAAMqB,YCGTlB,EAAQ,CACZ,CAAEI,GAAI,EAAGG,QAAS,QAASF,MAAM,GACjC,CAAED,GAAI,EAAGG,QAAS,UAAWF,MAAM,IAqBtBc,MAhBf,WACE,OACI,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQN,MAAM,qBAEd,kBAAC,EAAD,CAASA,MAAM,qBAAqBC,KAAM,kBAAC,EAAD,QAE1C,kBAAC,EAAD,CACED,MAAM,mBACNC,KAAM,kBAAC,EAAD,CAAOd,MAAOA,EAAOM,eAXf,IAYZS,mBAAoB,kBAAC,EAAD,CAASf,MAAOA,EAAOM,eAZ/B,QCDFc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff521ea0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = (props) => (\r\n    <form className=\"form\">\r\n        <input className=\"form__inputElement\" />\r\n        <button className=\"form__buttonElement\">Dodaj zadanie</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = (props) => (\r\n    <ul className=\"tasksList\">\r\n        {props.tasks.map(task => (\r\n            <li\r\n            key={task.id} className={`taskList__item${task.done && props.hideDoneTasks ? \" taskList__item--hidden\" : \"\"}`}\r\n            >\r\n                <div className=\"taskList__toggleButton\">\r\n                    {(task.done) ? \"âœ”\" : \"\"}\r\n                </div>\r\n                <span className={`${task.done ? \"taskList__item--done\" : \"\"} `} > \r\n                {task.content} \r\n                </span>\r\n                <div className=\"taskList__removeButton\">\r\n                    ðŸ—‘\r\n                </div>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({tasks, hideDoneTasks}) => (\r\n    tasks.length > 0 && (\r\n        <div className=\"tasksListOptions\">\r\n            <button className=\"taskListOptions__button\"> {hideDoneTasks ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone</button>\r\n            <button className=\"taskListOptions__button\" disabled={tasks.every(({ done }) => done )} >UkoÅ„cz wszystkie</button>\r\n        </div>\r\n    )\r\n\r\n);\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2>{ title }</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__content\">\r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = (props) => (\r\n    <main className=\"container\">\r\n        {props.children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React from 'react';\nimport Form from \"./Form\";\nimport Tasks from './Tasks';\nimport Buttons from './Buttons';\nimport Section from './Section';\nimport Header from './Header';\nimport Container from './Container';\n\nconst tasks = [\n  { id: 1, content: \"react\", done: true, },\n  { id: 2, content: \"kolacja\", done: false, },\n];\n\nconst hideDoneTasks = false;\n\nfunction App() {\n  return (\n      <Container>\n        <Header title=\"Lista zadaÅ„\" />\n\n        <Section title=\"Dodaj nowe zadanie\" body={<Form />} />\n\n        <Section\n          title=\"Lista zadaÅ„\"\n          body={<Tasks tasks={tasks} hideDoneTasks={hideDoneTasks} />}\n          extraHeaderContent={<Buttons tasks={tasks} hideDoneTasks={hideDoneTasks} />}\n        />\n      </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}