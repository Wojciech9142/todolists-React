{"version":3,"sources":["common/Container/index.js","common/Header/index.js","common/Section/index.js","features/author/styled.js","features/author/Author.js","features/tasks/taskLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TaskPage/index.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","styled.js","App.js","serviceWorker.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","index.js"],"names":["Container","props","className","children","Header","title","Section","body","extraHeaderContent","Paragraph","styled","p","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","newTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","useParams","useSelector","find","getTaskById","content","Form","form","Button","button","input","FormElement","useState","newTaskContent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","nanoid","Input","value","placeholder","onChange","target","Tasks","ul","TaskItem","li","hidden","css","toggle","remove","TaskContent","span","TaskList","location","useLocation","query","URLSearchParams","search","get","trim","filter","toUpperCase","includes","selectTasksByQuery","map","key","onClick","to","Wrapper","div","Buttons","areTasksEmpty","isEveryTaskDone","console","log","disabled","history","useHistory","searchParams","delete","set","pathname","toString","TasksPage","Search","StyledNav","nav","StyledUl","StyledLi","StyledNavLink","NavLink","attrs","activeClassName","App","path","TaskPage","Author","Boolean","window","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","taskSaga","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sSASeA,G,MANG,SAACC,GAAD,OACd,0BAAMC,UAAU,aACXD,EAAME,YCGAC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,4BAAQH,UAAU,UACd,4BAAKG,KCWEC,G,MAZC,SAAC,GAAD,IAAED,EAAF,EAAEA,MAAOE,EAAT,EAASA,KAAMC,EAAf,EAAeA,mBAAf,OACZ,6BAASN,UAAU,WACf,4BAAQA,UAAU,mBACd,4BAAMG,GACLG,GAEL,yBAAKN,UAAU,oBACVK,M,yGCRN,IAAME,EAAYC,IAAOC,EAAV,KCIP,aACX,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAQN,MAAM,cAEd,kBAAC,EAAD,CACIA,MAAM,iBACNE,KACI,oCACI,kBAACE,EAAD,sfAGA,kBAACA,EAAD,mO,gBChBXG,EAA0B,SAAAC,GAAK,OACxCC,aAAaC,QAHO,QAGkBC,KAAKC,UAAUJ,KCAnDK,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVR,MDAJG,KAAKM,MAAMR,aAAaS,QANJ,UCOhBC,UAAU,GAEdC,SAAU,CACNC,QAAS,cAAmC,IAAhCb,EAA+B,EAA/BA,MAAoBc,EAAW,EAApBC,QACnBf,EAAMgB,KAAKF,IAEfG,eAAgB,SAACC,GACbA,EAAMP,UAAYO,EAAMP,UAE5BQ,eAAgB,cAAqC,IAAlCnB,EAAiC,EAAjCA,MAAoBoB,EAAa,EAAtBL,QACpBM,EAAQrB,EAAMsB,WAAU,SAAAR,GAAI,OAAIA,EAAKS,KAAOH,KAClDpB,EAAMqB,GAAOG,MAAQxB,EAAMqB,GAAOG,MAEtCC,WAAY,cAAqC,IAAlCzB,EAAiC,EAAjCA,MAAoBoB,EAAa,EAAtBL,QAChBM,EAAQrB,EAAMsB,WAAU,SAAAR,GAAI,OAAIA,EAAKS,KAAOH,KAClDpB,EAAM0B,OAAOL,EAAO,IAExBM,WAAY,YAAgB,IAAD,EAAZ3B,EAAY,EAAZA,MAAY,cACJA,GADI,IACvB,2BAA0B,SACjBwB,MAAO,GAFO,gCAK3BI,kBAAmB,aACnBC,SAAU,SAACX,EAAD,GAAmC,IAAhBY,EAAe,EAAxBf,QAChBG,EAAMlB,MAAQ8B,M,EAatBzB,EAAW0B,QAPXlB,E,EAAAA,QACAI,E,EAAAA,eACAE,E,EAAAA,eACAM,E,EAAAA,WACAE,E,EAAAA,WACAC,E,EAAAA,kBACAC,E,EAAAA,SAESG,EAAmB,SAAAd,GAAK,OAAIA,EAAMlB,OAElCiC,EAAc,SAAAf,GAAK,OAAIc,EAAiBd,GAAOlB,OAC/CkC,EAAiB,SAAAhB,GAAK,OAAIc,EAAiBd,GAAOP,UAClDwB,EAAsB,SAAAjB,GAAK,OAAkC,IAA9Be,EAAYf,GAAOkB,QAClDC,EAAwB,SAAAnB,GAAK,OAAIe,EAAYf,GAAOoB,OAAM,qBAAGd,SAgB3DnB,IAAf,QC1De,aAAO,IACVkB,EAAOgB,cAAPhB,GACFT,EAAO0B,aAAY,SAAAtB,GAAK,OD0CP,SAACA,EAAOE,GAAR,OACvBa,EAAYf,GAAOuB,MAAK,qBAAGlB,KAAgBH,KC3CTsB,CAAYxB,EAAOK,MAErD,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAQ/B,MAAM,YACd,kBAAC,EAAD,CACIA,MAAOsB,EAAOA,EAAK6B,QAAU,sCAC7BjD,KAAMoB,EAAI,0BAAiBA,EAAKU,KAAO,MAAQ,OAAU,O,ooBCflE,IAAMoB,EAAO/C,IAAOgD,KAAV,KASJC,EAASjD,IAAOkD,OAAV,K,uFCTJlD,UAAOmD,MAAtB,KCmCeC,EA9BK,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACfC,EADe,KACCC,EADD,KAGhBC,EAAWC,cAcjB,OACI,kBAACV,EAAD,CAAMW,SAbW,SAACC,GAClBA,EAAMC,iBAENJ,EAASxC,EAAQ,CACb8B,QAASQ,EACT3B,MAAM,EACND,GAAImC,iBAGRN,EAAkB,MAKd,kBAACO,EAAD,CACIC,MAAOT,EACP9D,UAAU,qBACVwE,YAAY,wBACZC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBX,EAAkBW,EAAOH,UAEvD,kBAACd,EAAD,wB,o0CC9BL,IAAMkB,EAAQnE,IAAOoE,GAAV,KAKLC,GAAWrE,IAAOsE,GAAV,KAOf,SAAC/E,GAAD,OAAWA,EAAMgF,QAAUC,YAAhB,QAKJvB,GAASjD,IAAOkD,OAAV,KAUb,SAAC3D,GAAD,OAAWA,EAAMkF,QAAUD,YAAhB,QASX,SAACjF,GAAD,OAAWA,EAAMmF,QAAUF,YAAhB,QAUJG,GAAc3E,IAAO4E,KAAV,KAElB,SAACrF,GAAD,OAAWA,EAAMoC,MAAQ6C,YAAd,QCTFK,GAnCE,WACf,IAAMC,EAAWC,cACXC,EAAS,IAAIC,gBAAgBH,EAASI,QAASC,IAAI,UAEnDhF,EAAQwC,aAAY,SAAAtB,GAAK,ON6CC,SAACA,EAAO2D,GACtC,IAAM7E,EAAQiC,EAAYf,GAE1B,OAAI2D,GAAyB,KAAhBA,EAAMI,OAIZjF,EAAMkF,QAAO,qBAAEvC,QACVwC,cAAcC,SAASP,EAAMM,cAAcF,WAJ5CjF,EMjDsBqF,CAAmBnE,EAAO2D,MACvDlE,EAAW6B,YAAYN,GACvBmB,EAAWC,cACjB,OACE,kBAACU,EAAD,CAAO3E,UAAU,aACdW,EAAMsF,KAAI,SAAAxE,GAAI,OACb,kBAACoD,GAAD,CACEqB,IAAKzE,EAAKS,GAAI6C,OAAQzD,GAAYG,EAAKU,MAEvC,kBAAC,GAAD,CACEgE,QAAS,kBAAMnC,EAASlC,EAAeL,EAAKS,MAC5C+C,QAAM,GAEJxD,EAAKU,KAAQ,SAAM,IAEvB,kBAACgD,GAAD,CAAahD,KAAMV,EAAKU,MACtB,kBAAC,IAAD,CAAMiE,GAAE,mBAAc3E,EAAKS,KAAOT,EAAK6B,UAEzC,kBAAC,GAAD,CACE6C,QAAS,kBAAMnC,EAAS5B,EAAWX,EAAKS,MACxCgD,QAAM,GAFR,sB,klBC1BH,IAAMzB,GAASjD,IAAOkD,OAAV,MAkBN2C,GAAU7F,IAAO8F,IAAV,MCyBLC,GAjCC,WACZ,IAAMC,EAAgBrD,YAAYL,GAC5B2D,EAAkBtD,YAAYH,GAC9B1B,EAAW6B,YAAYN,GAC7B6D,QAAQC,IAAIrF,GAEZ,IAAM0C,EAAWC,cAEjB,OACI,kBAACoC,GAAD,KACI,kBAAC,GAAD,CAAQF,QAAS,kBAAMnC,EAASzB,OAAhC,wCAGEiE,EAAgB,GACd,oCACI,kBAAC,GAAD,CACIL,QAAS,kBAAMnC,EAASpC,OAEvBN,EAAW,aAAU,QAH1B,mBAKA,kBAAC,GAAD,CACIsF,SAAUH,EACVN,QAAS,kBAAMnC,EAAS1B,OAF5B,4B,8HC9Bb,IAAM+D,GAAU7F,IAAO8F,IAAV,MCGL,cACX,IAAMhB,EAAWC,cACXC,EAAS,IAAIC,gBAAgBH,EAASI,QAASC,IAAI,UACnDkB,EAAUC,cAchB,OACI,oCACI,kBAAC,GAAD,KACI,kBAACxC,EAAD,CACIE,YAAY,kBACZD,MAAOiB,GAAS,GAChBf,SAlBM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACfqC,EAAe,IAAItB,gBAAgBH,EAASI,QAEtB,KAAxBhB,EAAOH,MAAMqB,OACbmB,EAAaC,OAAO,UAEpBD,EAAaE,IAAI,SAAUvC,EAAOH,OAGtCsC,EAAQlF,KAAR,UAAgB2D,EAAS4B,SAAzB,YAAqCH,EAAaI,mBCkB3CC,OA5Bf,WAEE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQjH,MAAM,qBAEd,kBAAC,EAAD,CACEA,MAAM,qBACNE,KAAM,kBAAC,EAAD,QAGP,kBAAC,EAAD,CACCF,MAAM,eACNE,KAAM,kBAACgH,GAAD,QAGR,kBAAC,EAAD,CACElH,MAAM,mBACNE,KACE,kBAAC,GAAD,MAEFC,mBACE,kBAAC,GAAD,U,6kBC7BV,IAEagH,GAAY9G,IAAO+G,IAAV,MAITC,GAAWhH,IAAOoE,GAAV,MASR6C,GAAWjH,IAAOsE,GAAV,MAIR4C,GAAgBlH,YAAOmH,KAASC,OAAM,iBAAO,CACtDC,gBApBoB,YAmBKrH,CAAH,KAnBF,UCwCTsH,OAnCf,WACE,OACE,kBAAC,IAAD,KACE,kBAACR,GAAD,KACE,kBAACE,GAAD,KACE,kBAACC,GAAD,KACE,kBAACC,GAAD,CAAetB,GAAG,YAAlB,YAIF,kBAACqB,GAAD,KACE,kBAACC,GAAD,CAAetB,GAAG,WAAlB,eAKJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2B,KAAK,gBACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,aACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,KACV,kBAAC,IAAD,CAAU3B,GAAG,kBCtBL8B,QACW,cAA7BC,OAAO7C,SAAS8C,UAEe,UAA7BD,OAAO7C,SAAS8C,UAEhBD,OAAO7C,SAAS8C,SAASC,MACvB,2D,mDClBOC,GAAe,yCAAG,6BAAAC,EAAA,sEACJC,MAAM,sCADF,cACrBC,EADqB,QAGdC,IACT,IAAIC,MAAMF,EAASG,YAJI,SAOdH,EAASI,OAPK,mFAAH,qD,aCKlBC,I,aAUAC,I,aAKOC,IAfjB,SAAUF,KAAV,wEAE6B,OAF7B,kBAEmCG,aAAKX,IAFxC,OAGQ,OADMY,EAFd,gBAGcC,aAAI3G,EAAS0G,IAH3B,8BAMQ,OANR,mCAMcD,aAAKG,MAAD,MANlB,sDAUA,SAAUL,KAAV,wEACkB,OADlB,SACwBM,aAAOzG,GAD/B,OAEI,OADMjC,EADV,gBAEUsI,aAAKvI,EAAyBC,GAFxC,wCAKO,SAAUqI,KAAV,kEACH,OADG,SACGM,aAAW/G,EAAkBgH,KAAMT,IADtC,OAEH,OAFG,SAEGU,aAAU,IAAKT,IAFlB,wCCdP,IAAMU,GAAiBC,eAEjBC,GAAQC,YAAe,CACzBC,QAAS,CACLlJ,MAAOmJ,GAEXC,WAAY,CAACN,MAGjBA,GAAeO,IAAIhB,IAEJW,UCTfM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUR,MAAOA,IACf,kBAAC,GAAD,QAGJS,SAASC,eAAe,SJqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.c38c60f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = (props) => (\r\n    <main className=\"container\">\r\n        {props.children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2>{ title }</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__content\">\r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","import styled from 'styled-components';\r\n\r\nexport const Paragraph = styled.p`\r\n    padding: 20px;\r\n`;","import React from 'react';\r\nimport Container from '../../common/Container';\r\nimport Header from '../../common/Header';\r\nimport Section from '../../common/Section';\r\nimport { Paragraph } from './styled';\r\n\r\nexport default () => {\r\n    return (\r\n        <Container>\r\n            <Header title=\"O autorze\" />\r\n\r\n            <Section\r\n                title=\"Wojciech Wolak\"\r\n                body={\r\n                    <>\r\n                        <Paragraph>\r\n                            Jestem prostym chłopakiem z Kołobrzegu, który chciałby profesjonalnie zająć się tworzeniem stron internetowych. Będąc w szkole bardziej interesowałem się back-endem, jednak z czasem zacząłem tworzyć front-end dla siebie. Próbowałem frameworków Angular, Vue, lecz to React przypadł mi do gustu najbardziej i mimo że dopiero uczę się go jestem pewny, że jest to framework w sam raz dla mnie.\r\n                        </Paragraph>\r\n                        <Paragraph>\r\n                            Po czasie spędzonym w pracy rozwijam umiejętności w tworzeniu stron. Kiedy odejdę od laptopa lubię jeździć na rowerze, piec ciasta, pograć w piłkę nożną.\r\n                        </Paragraph>\r\n                    </>\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey))","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './taskLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId)\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: newTasks }) => {\r\n            state.tasks = newTasks;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n} = tasksSlice.actions;\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if(!query || query.trim() ===\"\"){\r\n        return tasks;\r\n    }\r\n    \r\n    return tasks.filter(({content}) => \r\n        content.toUpperCase().includes(query.toUpperCase().trim()));\r\n}\r\n\r\nexport default tasksSlice.reducer;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getTaskById } from '../tasksSlice';\r\nimport Container from '../../../common/Container';\r\nimport Header from '../../../common/Header';\r\nimport Section from '../../../common/Section';\r\n\r\nexport default () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Zadanie\" />\r\n            <Section\r\n                title={task ? task.content : \"Nie znaleziono zadania 😥\"}\r\n                body={task ? `Ukończone: ${task.done ? \"Tak\" : \"Nie\"}` : \"\"}\r\n            />\r\n        </Container>\r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nexport const Form = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: 787px) {\r\n        grid-template-columns: 1fr;\r\n}`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: hsl(180, 100%, 25%);\r\n    color: white;\r\n    padding: 10px;\r\n    transition: background-color .3s, transform .3s;\r\n\r\n    &:hover {\r\n    background-color: hsl(180, 100%, 30%);\r\n    cursor: pointer;\r\n    transform: scale(1.2);\r\n    }\r\n\r\n    &:active {\r\n    background-color: hsl(180, 100%, 20%);\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\npadding: 10px;\r\n`;","import React, { useState } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask } from '../../tasksSlice';\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { Form, Button } from './styled'\r\nimport Input from \"../../Input\";\r\n\r\nconst FormElement = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                className=\"form__inputElement\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default FormElement;","import styled, { css } from 'styled-components';\r\n\r\nexport const Tasks = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n`;\r\n\r\nexport const TaskItem = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 20px;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n\r\n    ${(props) => props.hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: background .3s;\r\n\r\n    ${(props) => props.toggle && css`\r\n        background: hsl(120, 100%, 25%);\r\n\r\n        &:hover {\r\n            background: hsl(120, 100%, 30%);\r\n            cursor: pointer;\r\n        }\r\n    `}\r\n\r\n    ${(props) => props.remove && css`\r\n        background: hsl(0, 100%, 50%);\r\n\r\n        &:hover {\r\n            background: hsl(0, 100%, 40%);\r\n            cursor: pointer;\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n\r\n    ${(props) => props.done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from '../../tasksSlice';\r\nimport { Tasks, Button, TaskItem, TaskContent } from './styled';\r\n\r\nconst TaskList = () => {\r\n  const location = useLocation();\r\n  const query = (new URLSearchParams(location.search)).get(\"szukaj\");\r\n\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Tasks className=\"tasksList\">\r\n      {tasks.map(task => (\r\n        <TaskItem\r\n          key={task.id} hidden={hideDone && task.done}\r\n        >\r\n          <Button\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n            toggle\r\n          >\r\n            {(task.done) ? \"✔\" : \"\"}\r\n          </Button>\r\n          <TaskContent done={task.done} >\r\n            <Link to={`/zadania/${task.id}`}>{task.content}</Link>\r\n          </TaskContent>\r\n          <Button\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n            remove\r\n          >\r\n            🗑\r\n                    </Button>\r\n        </TaskItem>\r\n      ))}\r\n    </Tasks>\r\n  );\r\n};\r\n\r\n\r\nexport default TaskList;","import styled from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    border: none;\r\n    color: hsl(180, 100%, 35%);\r\n    font-weight: 300;\r\n    transition: color .3s;\r\n\r\n    &:disabled{\r\n        color: grey;\r\n        cursor: initial;\r\n    }\r\n\r\n    &:hover{\r\n        color: hsl(180, 100%, 45%);\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width:787px) {\r\n        grid-template-columns: 1fr;\r\n}\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    toggleHideDone,\r\n    selectHideDone,\r\n    selectAreTasksEmpty,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    selectIsEveryTaskDone\r\n} from \"../../tasksSlice\";\r\nimport { Button, Wrapper } from './styled';\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n    console.log(hideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n                Pokaż przykładowe zadania\r\n            </Button>\r\n            {!areTasksEmpty > 0 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        disabled={isEveryTaskDone}\r\n                        onClick={() => dispatch(setAllDone())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    );\r\n\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import React from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport Input from '../../Input';\r\nimport { Wrapper } from './styled';\r\n\r\nexport default () => {\r\n    const location = useLocation();\r\n    const query = (new URLSearchParams(location.search)).get(\"szukaj\");\r\n    const history = useHistory();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (target.value.trim() === \"\") {\r\n            searchParams.delete(\"szukaj\");\r\n        } else {\r\n            searchParams.set(\"szukaj\", target.value);\r\n        }\r\n\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Wrapper>\r\n                <Input\r\n                    placeholder=\"Filtruj zadania\"\r\n                    value={query || \"\"}\r\n                    onChange={onInputChange}\r\n                />\r\n            </Wrapper>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport Form from \"./Form\";\r\nimport TaskList from './TaskList';\r\nimport Buttons from './Buttons';\r\nimport Section from '../../../common/Section';\r\nimport Header from '../../../common/Header';\r\nimport Container from '../../../common/Container';\r\nimport Search from './Search';\r\n\r\nfunction TasksPage() {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n      />\r\n\r\n       <Section\r\n        title=\"Wyszukiwarka\"\r\n        body={<Search />}\r\n      />\r\n\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={\r\n          <TaskList\r\n          />}\r\n        extraHeaderContent={\r\n          <Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TasksPage;\r\n","import styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNav = styled.nav`\r\n    padding: 20px;\r\n`;\r\n\r\nexport const StyledUl = styled.ul`\r\n    background: green;\r\n    padding: 30px;\r\n    display: grid;\r\n    list-style: none;\r\n    grid-template-columns: 90px 90px;\r\n    justify-content:center;\r\n`;\r\n\r\nexport const StyledLi = styled.li`\r\n    text-decoration: none;\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    &.${activeClassName} {\r\n        color: blue;\r\n    }\r\n\r\n    text-decoration: none;\r\n    font-size: 20px;\r\n`;","import React from 'react';\r\nimport { HashRouter, NavLink, Redirect, Route, Switch } from 'react-router-dom';\r\nimport Author from './features/author/Author';\r\nimport TaskPage from './features/tasks/TaskPage';\r\nimport TasksPage from './features/tasks/TasksPage'\r\nimport { StyledNav, StyledNavLink , StyledUl, StyledLi } from './styled';\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <StyledNav>\r\n        <StyledUl>\r\n          <StyledLi>\r\n            <StyledNavLink to=\"/zadania\">\r\n              Zadania\r\n            </StyledNavLink>\r\n          </StyledLi>\r\n          <StyledLi>\r\n            <StyledNavLink to=\"/author\">\r\n              O autorze\r\n            </StyledNavLink>\r\n          </StyledLi>\r\n        </StyledUl>\r\n        <Switch>\r\n          <Route path=\"/zadania/:id\">\r\n            <TaskPage />\r\n          </Route>\r\n          <Route path=\"/zadania/\">\r\n            <TasksPage />\r\n          </Route>\r\n          <Route path=\"/author\">\r\n            <Author />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Redirect to=\"/zadania\" />\r\n          </Route>\r\n        </Switch>\r\n      </StyledNav>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todolists-React/exampleTasks.json\");\r\n\r\n    if(!response.ok){\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, put, takeLatest, takeEvery, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\r\nimport { saveTasksInLocalStorage } from './taskLocalStorage';\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    }\r\n    catch (error) {\r\n        yield call(alert, error);\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* taskSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport { taskSaga } from \"./features/tasks/tasksSaga\";\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(taskSaga);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}